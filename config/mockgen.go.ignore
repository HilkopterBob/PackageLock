// Code generated by MockGen. DO NOT EDIT.
// Source: config/conf-init.go
//
// Generated by this command:
//
//	mockgen -source=config/conf-init.go
//

// Package mock_config is a generated GoMock package.
package mock_config

import (
	io "io"
	reflect "reflect"

	fsnotify "github.com/fsnotify/fsnotify"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// AddConfigPath mocks base method.
func (m *MockConfigProvider) AddConfigPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConfigPath", path)
}

// AddConfigPath indicates an expected call of AddConfigPath.
func (mr *MockConfigProviderMockRecorder) AddConfigPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfigPath", reflect.TypeOf((*MockConfigProvider)(nil).AddConfigPath), path)
}

// OnConfigChange mocks base method.
func (m *MockConfigProvider) OnConfigChange(run func(fsnotify.Event)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigChange", run)
}

// OnConfigChange indicates an expected call of OnConfigChange.
func (mr *MockConfigProviderMockRecorder) OnConfigChange(run any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigChange", reflect.TypeOf((*MockConfigProvider)(nil).OnConfigChange), run)
}

// ReadConfig mocks base method.
func (m *MockConfigProvider) ReadConfig(in io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockConfigProviderMockRecorder) ReadConfig(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockConfigProvider)(nil).ReadConfig), in)
}

// ReadInConfig mocks base method.
func (m *MockConfigProvider) ReadInConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInConfig indicates an expected call of ReadInConfig.
func (mr *MockConfigProviderMockRecorder) ReadInConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInConfig", reflect.TypeOf((*MockConfigProvider)(nil).ReadInConfig))
}

// SetConfigName mocks base method.
func (m *MockConfigProvider) SetConfigName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigName", name)
}

// SetConfigName indicates an expected call of SetConfigName.
func (mr *MockConfigProviderMockRecorder) SetConfigName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigName", reflect.TypeOf((*MockConfigProvider)(nil).SetConfigName), name)
}

// SetConfigType mocks base method.
func (m *MockConfigProvider) SetConfigType(fileext string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigType", fileext)
}

// SetConfigType indicates an expected call of SetConfigType.
func (mr *MockConfigProviderMockRecorder) SetConfigType(fileext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigType", reflect.TypeOf((*MockConfigProvider)(nil).SetConfigType), fileext)
}

// WatchConfig mocks base method.
func (m *MockConfigProvider) WatchConfig() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatchConfig")
}

// WatchConfig indicates an expected call of WatchConfig.
func (mr *MockConfigProviderMockRecorder) WatchConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConfig", reflect.TypeOf((*MockConfigProvider)(nil).WatchConfig))
}

// WriteConfigAs mocks base method.
func (m *MockConfigProvider) WriteConfigAs(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteConfigAs", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteConfigAs indicates an expected call of WriteConfigAs.
func (mr *MockConfigProviderMockRecorder) WriteConfigAs(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteConfigAs", reflect.TypeOf((*MockConfigProvider)(nil).WriteConfigAs), path)
}
